{"version":3,"sources":["componets/FullBalance/index.tsx","componets/CurrentDate/index.tsx","componets/User/UserName.tsx","componets/User/UserImage.tsx","redux/actions/userActions.ts","redux/types.ts","componets/Button/index.tsx","componets/UserSignOut/index.tsx","componets/Profile/index.tsx","componets/User/UserSettings.tsx","componets/User/index.tsx","componets/Header/index.tsx","componets/AccountCard/index.tsx","redux/actions/accountActions.ts","componets/AccountSelect/SelectInput.tsx","componets/AccountSelect/index.tsx","Services/OperationsSortService.ts","componets/AccountHistory/AccountHistoryTable.tsx","componets/AccountHistory/index.tsx","componets/AccountInfo/index.tsx","componets/AccountClose/index.tsx","componets/Input/index.tsx","componets/Form/index.tsx","componets/AccountTransfer/index.tsx","componets/AccountTemplateCard/index.tsx","componets/AccountTemplates/index.tsx","componets/AccountPayment/index.tsx","componets/UserCard/index.tsx","componets/AccountStatement/index.tsx","componets/AccountReplenishment/index.tsx","componets/AccountCreateTemplate/index.tsx","pages/AccountPage.tsx","componets/UserMainData/index.tsx","componets/FileInput/index.tsx","componets/UserUploadImg/index.tsx","componets/UserDelete/index.tsx","pages/UserPage.tsx","pages/mainPage.tsx","componets/LoginForm/index.tsx","redux/actions/loginActions.ts","pages/LoginPage.tsx","componets/RegistrationForm/index.tsx","pages/RegistrationPage.tsx","App.tsx","types/modelTypes.ts","redux/reducers/loginReducer.ts","redux/reducers/userReducer.ts","redux/reducers/accountReducer.ts","redux/reducers/rootReducer.ts","Services/Request.ts","API/AccountAPI.ts","redux/sagas/accountSaga.ts","Services/imageUploadService.ts","API/UserAPI.ts","redux/sagas/userSaga.ts","API/LoginAPI.ts","redux/sagas/loginSaga.ts","redux/sagas/rootSaga.ts","index.tsx"],"names":["FullBalance","accounts","useSelector","state","account","balance","i","length","Math","round","Number","EPSILON","CurrentDate","date","format","Date","now","UserName","name","UserImage","url","className","style","backgroundImage","userDeleteRequest","type","Button","text","size","onClick","children","e","SignOut","localStorage","removeItem","window","location","href","Profile","closeDrawer","user","data","img","src","alt","email","to","UserSettings","useState","modal","setModal","closeModal","title","placement","closable","onClose","width","visible","User","dispatch","useDispatch","useEffect","Header","AccountCard","disableButton","id","setCurrentAccount","accountGetTemplatesSuccess","templates","SelectInput","selectElement","options","map","value","label","showSearch","placeholder","onChange","AccountSelect","sortByDate","a","b","AccountHistoryTable","history","start","end","currentId","full","operations","filter","operation","filterOperation","sort","account_out_id","amount","key","toString","operation_type","account_in_id","tableType","AccountHistory","startDate","setStartDate","endDate","setEndDate","current","currentAccount","RangePicker","locale","onCalendarChange","event","AccountInfo","AccountClose","setVisible","useHistory","deleteAccount","accountId","push","onOk","onCancel","footer","Input","handler","target","Form","props","onSubmit","submitHandler","header","buttonText","htmlType","AccountTransfer","setAmount","accountNumber","setAccountNumber","preventDefault","message","info","accountOutId","accountInId","error","val","AccountTemplateCard","paymentName","targetName","targetEmail","AccountTemplates","cards","template","clickHandler","AccountPayment","purpose","setPurpose","setEmail","setPaymentName","setTargetName","requisite","UserCard","AccountStatement","AccountReplenishment","AccountCreateTemplate","AccountPage","useParams","marginTop","defaultActiveKey","padding","TabPane","tab","UserMainData","setName","updatedUser","FileInput","onChangeHandler","UserUploadImg","file","image","files","UserSuicide","Tabs","UserPage","UserDelete","MainPage","login","isLogin","loginError","exact","path","LoginForm","password","setPassword","loginRequest","LoginPage","textAlign","RegistrationForm","registrationRequest","RegistrationPage","App","Method","token","getItem","initialState","rootReducer","combineReducers","action","RequestService","requestHeaders","Authorization","Request","method","fetch","headers","body","JSON","stringify","response","ok","Error","getRequest","Get","then","res","json","postRequest","Post","putRequest","Put","patchRequest","Patch","deleteRequest","Delete","AccountAPI","requestService","MapRequisite","payment_name","target_name","target_email","MapRequisiteRevers","getAccountInfo","getAccounts","getHistory","createAccount","closeAccount","replenishment","transfer","payment","getTemplates","requisitesResponse","createTemplate","this","loadCurrentAccount","loadMinAccounts","loadTemplates","accountSaga","accountAPI","accountData","put","success","takeEvery","ImageUploadService","formData","FormData","append","redirect","UserAPI","getUser","putUser","changeUserImage","deleteUser","loadUser","updateUser","updateImage","userSaga","userAPI","LoginAPI","PostRequest","GetRequest","checkToken","createUser","checkLogin","registration","loginSaga","loginAPI","access_token","setItem","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20672863.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FaRubleSign } from 'react-icons/fa';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\n\r\nconst FullBalance = () => {\r\n  const accounts = useSelector((state: RootState) => state.account.accounts);\r\n  let balance = 0;\r\n  if (accounts) {\r\n    for (let i = 0; i < accounts.length; i++) {\r\n      balance += accounts[i].balance;\r\n    }\r\n  }\r\n  return <>\r\n    {balance !== 0\r\n      ? <>{Math.round(balance * 100 + Number.EPSILON) / 100} <FaRubleSign/> </>\r\n      : ''\r\n    }\r\n  </>;\r\n};\r\n\r\nexport default FullBalance;","import React from 'react';\r\nimport { format } from 'date-fns';\r\n\r\nconst CurrentDate = () => {\r\n  let date = format(Date.now(), 'dd/MM/yyyy');\r\n  return <>{date}</>;\r\n};\r\n\r\nexport default CurrentDate;","import React from 'react';\r\n\r\ninterface IUserNameProps {\r\n  name: string | null\r\n}\r\n\r\nconst UserName = ({ name }: IUserNameProps) => {\r\n  return <>{name}</>;\r\n};\r\n\r\nexport default UserName;","import React from 'react';\r\nimport { FaUserCircle } from 'react-icons/all';\r\n\r\ninterface IUserImageProps {\r\n  url: string | null\r\n}\r\n\r\nconst UserImage = ({ url }: IUserImageProps) => {\r\n\r\n  return <>\r\n    {(url)\r\n      ? <div className=\"avatar\" style={{ backgroundImage: `url(${url})` }}>.</div>\r\n      : <FaUserCircle className=\"icon\"/>\r\n    }\r\n  </>;\r\n};\r\n\r\nexport default UserImage;\r\n;","import {\r\n  USER_CHANGE_IMAGE_REQUEST,\r\n  USER_DELETE_REQUEST,\r\n  USER_LOAD_SUCCESS,\r\n  USER_REQUEST,\r\n  USER_UPDATE_REQUEST,\r\n} from '../types';\r\nimport { IUser } from '../../types/modelTypes';\r\nimport {\r\n  IUserDeleteRequest,\r\n  IUserLoadSuccess,\r\n  IUserRequest,\r\n  IUserUpdate,\r\n  IUserUpdateImageRequest,\r\n} from '../../types/actionTypes/UserActionTypes';\r\n\r\nexport const userRequest = (): IUserRequest => {\r\n  return {\r\n    type: USER_REQUEST,\r\n  };\r\n};\r\n\r\nexport const userLoadSuccess = (user: IUser): IUserLoadSuccess => {\r\n  return {\r\n    type: USER_LOAD_SUCCESS,\r\n    user,\r\n  };\r\n};\r\n\r\nexport const userUpdateRequest = (updatedUser: IUser): IUserUpdate => {\r\n  return {\r\n    type: USER_UPDATE_REQUEST,\r\n    updatedUser,\r\n  };\r\n};\r\n\r\nexport const userUpdateImageRequest = (image: File): IUserUpdateImageRequest => {\r\n  return {\r\n    type: USER_CHANGE_IMAGE_REQUEST,\r\n    image,\r\n  };\r\n};\r\n\r\nexport const userDeleteRequest = (): IUserDeleteRequest => {\r\n  return {\r\n    type: USER_DELETE_REQUEST,\r\n  };\r\n};\r\n\r\nexport type UserActions = IUserLoadSuccess | IUserUpdate\r\n\r\n","//LOGIN\r\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\nexport const LOGIN_CHECK_TOKEN = 'LOGIN_CHECK_TOKEN';\r\nexport const REGISTRATION_REQUEST = 'REGISTRATION_REQUEST';\r\nexport const REGISTRATION_SUCCESS = 'REGISTRATION_SUCCESS';\r\nexport const REGISTRATION_ERROR = 'REGISTRATION_ERROR';\r\n//USER\r\nexport const USER_REQUEST = 'USER_REQUEST';\r\nexport const USER_LOAD_SUCCESS = 'USER_LOAD_SUCCESS';\r\nexport const USER_UPDATE_REQUEST = 'USER_UPDATE_REQUEST';\r\nexport const USER_DELETE_REQUEST = 'USER_DELETE_REQUEST';\r\nexport const USER_CHANGE_IMAGE_REQUEST = 'USER_CHANGE_IMAGE_REQUEST';\r\n\r\n//ACCOUNT\r\nexport const ACCOUNT_CREATE_REQUEST = 'ACCOUNT_CREATE_REQUEST';\r\nexport const ACCOUNT_CLOSE_REQUEST = 'ACCOUNT_CLOSE_REQUEST';\r\nexport const ACCOUNT_SET_CURRENT = 'ACCOUNT_SET_CURRENT';\r\nexport const ACCOUNT_CURRENT_SUCCESS = 'ACCOUNT_CURRENT_SUCCESS';\r\nexport const ACCOUNT_MIN_REQUEST = 'ACCOUNT_MIN_REQUEST';\r\nexport const ACCOUNT_MIN_SUCCESS = 'ACCOUNT_MIN_SUCCESS';\r\nexport const ACCOUNT_HISTORY_SUCCESS = 'ACCOUNT_HISTORY_SUCCESS';\r\nexport const ACCOUNT_REPLENISHMENT_REQUEST = 'ACCOUNT_REPLENISHMENT_REQUEST';\r\nexport const ACCOUNT_TRANSFER_REQUEST = 'ACCOUNT_TRANSFER_REQUEST';\r\nexport const ACCOUNT_PAYMENT_REQUEST = 'ACCOUNT_PAYMENT_REQUEST';\r\nexport const ACCOUNT_TEMPLATES_REQUEST = 'ACCOUNT_TEMPLATES_REQUEST';\r\nexport const ACCOUNT_TEMPLATES_SUCCESS = 'ACCOUNT_TEMPLATES_SUCCESS';\r\nexport const ACCOUNT_TEMPLATE_CREATE_REQUEST = 'ACCOUNT_TEMPLATE_CREATE_REQUEST';\r\n","import React, { FunctionComponent } from 'react';\r\nimport './Button.css';\r\n\r\ntype type = 'primary' | 'light' | 'danger' | 'outline'\r\ntype size = 'full' | 'content'\r\n\r\ninterface IButton {\r\n  text: string,\r\n  type: type,\r\n  size: size,\r\n  htmlType?: string,\r\n  onClick?: (e: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nconst Button: FunctionComponent<IButton> = ({ text, type, size, onClick, children }) => {\r\n  const onClickHandler = (e: React.MouseEvent<HTMLElement>) => {\r\n    if (onClick) onClick(e);\r\n  };\r\n  return <button onClick={onClickHandler} className={`button ${type} ${size}`}>{text}{children}</button>;\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../Button';\r\n\r\nconst SignOut = () => {\r\n  const onClickHandler = () => {\r\n    localStorage.removeItem('jwt');\r\n    window.location.href = 'login';\r\n  };\r\n\r\n  return <Button text=\"Выйти\" type=\"danger\" size=\"full\" onClick={onClickHandler}/>;\r\n};\r\n\r\nexport default SignOut;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Profile.css';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '../Button';\r\nimport SignOut from '../UserSignOut';\r\nimport { Divider } from 'antd';\r\n\r\ninterface IProfile {\r\n  closeDrawer: () => any\r\n}\r\n\r\nconst Profile = ({ closeDrawer }: IProfile) => {\r\n  const user = useSelector((state: RootState) => state.user.data);\r\n  return (\r\n    <div className=\"profile\">\r\n      {user.img ? <img src={user.img} alt='Ваша фотография'/> : <p>Здесь могло быть ваше фото</p>}\r\n      <Divider/>\r\n      <h2>{user.name}</h2>\r\n      <h2>{user.email}</h2>\r\n      <Divider/>\r\n      <Link to=\"/update-user\" onClick={closeDrawer}>\r\n        <Button text=\"Изменить данные\" type=\"primary\" size=\"full\"/>\r\n      </Link>\r\n      <Divider/>\r\n      <SignOut/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;","import { MdSettings } from 'react-icons/md';\r\nimport React, { useState } from 'react';\r\nimport Profile from '../Profile';\r\nimport { Drawer } from 'antd';\r\n\r\nconst UserSettings = () => {\r\n  const [modal, setModal] = useState<boolean>(false);\r\n  const openModal = () => {\r\n    setModal(true);\r\n  };\r\n  const closeModal = () => {\r\n    setModal(false);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"user__icon-btn\" onClick={openModal}>\r\n        <MdSettings/>\r\n      </div>\r\n      <Drawer title=\"Настройка профиля\" placement=\"right\"\r\n              closable={true} onClose={closeModal} width=\"auto\"\r\n              visible={modal} className=\"profile-overlay\">\r\n        <Profile closeDrawer={closeModal}/>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserSettings;","import React, { useEffect } from 'react';\r\nimport UserName from './UserName';\r\nimport './User.css';\r\nimport UserImage from './UserImage';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { userRequest } from '../../redux/actions/userActions';\r\nimport UserSettings from './UserSettings';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\n\r\nconst User = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state: RootState) => state.user);\r\n  useEffect(() => {\r\n    dispatch(userRequest());\r\n  }, [dispatch]);\r\n  return (\r\n    <div className=\"user\">\r\n      <UserName name={user.data.name}/>\r\n      <UserSettings/>\r\n      <UserImage url={user.data.img}/>\r\n    </div>);\r\n};\r\n\r\nexport default User;","import React from 'react';\r\nimport './Header.css';\r\nimport FullBalance from '../FullBalance';\r\nimport CurrentDate from '../CurrentDate';\r\nimport { FaRegCalendarAlt } from 'react-icons/fa';\r\nimport User from '../User';\r\n\r\nconst Header = () => {\r\n  return <div className=\"header\">\r\n    <div className=\"header__item\"><FullBalance/></div>\r\n    <div className=\"header__item\"><FaRegCalendarAlt/> {' '} <CurrentDate/></div>\r\n    <div className=\"header__item\"><User/></div>\r\n  </div>;\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './AccountCard.css';\r\nimport { IAccount } from '../../types/modelTypes';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '../Button';\r\n\r\ninterface IAccountCardProps {\r\n  account: IAccount\r\n  disableButton?: boolean\r\n}\r\n\r\nconst AccountCard = ({ account, disableButton }: IAccountCardProps) => {\r\n  return (\r\n    <div className=\"account__card\">\r\n      <h2 className=\"account__number\">Номер счёта: {account.id}</h2>\r\n      <h1 className=\"account__balance\">Баланс: {account.balance}</h1>\r\n      {disableButton\r\n        ? ''\r\n        : <Link to={`/account/${account.id}`}><Button text=\"Действия\" type=\"primary\" size=\"content\"/></Link>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountCard;","import {\r\n  ACCOUNT_CLOSE_REQUEST,\r\n  ACCOUNT_CREATE_REQUEST,\r\n  ACCOUNT_CURRENT_SUCCESS,\r\n  ACCOUNT_HISTORY_SUCCESS,\r\n  ACCOUNT_MIN_REQUEST,\r\n  ACCOUNT_MIN_SUCCESS,\r\n  ACCOUNT_PAYMENT_REQUEST,\r\n  ACCOUNT_REPLENISHMENT_REQUEST,\r\n  ACCOUNT_SET_CURRENT,\r\n  ACCOUNT_TEMPLATE_CREATE_REQUEST,\r\n  ACCOUNT_TEMPLATES_REQUEST,\r\n  ACCOUNT_TEMPLATES_SUCCESS,\r\n  ACCOUNT_TRANSFER_REQUEST,\r\n} from '../types';\r\nimport {\r\n  IAccountClose,\r\n  IAccountCreateRequest,\r\n  IAccountHistorySuccess,\r\n  IAccountMinRequest,\r\n  IAccountMinSuccess,\r\n  IAccountPayment,\r\n  IAccountReplenishment,\r\n  IAccountRequisitesRequest,\r\n  IAccountRequisitesSuccess,\r\n  IAccountTemplateCreateRequest,\r\n  IAccountTransfer,\r\n  ICurrentAccountSuccess,\r\n  ISetCurrentAccount,\r\n} from '../../types/actionTypes/AccountActionTypes';\r\nimport {\r\n  IAccount,\r\n  IOperation,\r\n  IPaymentRequest,\r\n  IReplenishmentRequest,\r\n  IRequisite,\r\n  ITransferRequest,\r\n} from '../../types/modelTypes';\r\n\r\nexport const setCurrentAccount = (id: number): ISetCurrentAccount => {\r\n  return {\r\n    type: ACCOUNT_SET_CURRENT,\r\n    id,\r\n  };\r\n};\r\n\r\nexport const currentAccountSuccess = (account: IAccount): ICurrentAccountSuccess => {\r\n  return {\r\n    type: ACCOUNT_CURRENT_SUCCESS,\r\n    account,\r\n  };\r\n};\r\n\r\nexport const accountsMinRequest = (): IAccountMinRequest => {\r\n  return {\r\n    type: ACCOUNT_MIN_REQUEST,\r\n  };\r\n};\r\n\r\nexport const accountsMinSuccess = (accounts: IAccount[]): IAccountMinSuccess => {\r\n  return {\r\n    type: ACCOUNT_MIN_SUCCESS,\r\n    accounts,\r\n  };\r\n};\r\n\r\nexport const accountHistorySuccess = (operations: IOperation[]): IAccountHistorySuccess => {\r\n  return {\r\n    type: ACCOUNT_HISTORY_SUCCESS,\r\n    operations,\r\n  };\r\n};\r\n\r\nexport const accountClose = (accountId: number): IAccountClose => {\r\n  return {\r\n    type: ACCOUNT_CLOSE_REQUEST,\r\n    accountId,\r\n  };\r\n};\r\n\r\nexport const accountCreate = (): IAccountCreateRequest => {\r\n  return {\r\n    type: ACCOUNT_CREATE_REQUEST,\r\n  };\r\n};\r\n\r\nexport const accountReplenishment = (data: IReplenishmentRequest): IAccountReplenishment => {\r\n  return {\r\n    type: ACCOUNT_REPLENISHMENT_REQUEST,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const accountTransfer = (data: ITransferRequest): IAccountTransfer => {\r\n  return {\r\n    type: ACCOUNT_TRANSFER_REQUEST,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const accountPayment = (data: IPaymentRequest): IAccountPayment => {\r\n  return {\r\n    type: ACCOUNT_PAYMENT_REQUEST,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const accountGetTemplatesRequest = (): IAccountRequisitesRequest => {\r\n  return {\r\n    type: ACCOUNT_TEMPLATES_REQUEST,\r\n  };\r\n};\r\n\r\nexport const accountGetTemplatesSuccess = (templates: IRequisite[]): IAccountRequisitesSuccess => {\r\n  return {\r\n    type: ACCOUNT_TEMPLATES_SUCCESS,\r\n    templates,\r\n  };\r\n};\r\n\r\nexport const accountTemplateCreateRequest = (template: IRequisite): IAccountTemplateCreateRequest => {\r\n  return {\r\n    type: ACCOUNT_TEMPLATE_CREATE_REQUEST,\r\n    template,\r\n  };\r\n};\r\n\r\nexport type AccountActions =\r\n  IAccountMinRequest\r\n  | IAccountMinSuccess\r\n  | ISetCurrentAccount\r\n  | ICurrentAccountSuccess\r\n  | IAccountHistorySuccess\r\n  | IAccountRequisitesSuccess\r\n\r\n\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { Select } from 'antd';\r\nimport { setCurrentAccount } from '../../redux/actions/accountActions';\r\nimport React from 'react';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport { IAccount } from '../../types/modelTypes';\r\n\r\nconst SelectInput = () => {\r\n  const dispatch = useDispatch();\r\n  const accounts = useSelector((state: RootState) => state.account.accounts);\r\n\r\n  const onChange = (id: number) => {\r\n    dispatch(setCurrentAccount(id));\r\n  };\r\n  let selectElement = <h2>У ваc ещё нет ни одного счёта</h2>;\r\n  if (accounts) {\r\n    const options = accounts.map((account: IAccount) => {\r\n      return {\r\n        value: account.id,\r\n        label: account.id,\r\n      };\r\n    });\r\n    selectElement = (\r\n      <div>\r\n        <h1>выбор счёта</h1>\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder='Выберите счёт'\r\n          options={options}\r\n          onChange={onChange}\r\n        >\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return selectElement;\r\n};\r\n\r\nexport default SelectInput;","import React, { useEffect } from 'react';\r\nimport SelectInput from './SelectInput';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { accountCreate, accountsMinRequest, setCurrentAccount } from '../../redux/actions/accountActions';\r\nimport Button from '../Button';\r\nimport { Divider } from 'antd';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\n\r\nconst AccountSelect = () => {\r\n  const accounts = useSelector((state: RootState) => state.account.accounts);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(accountsMinRequest());\r\n\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (accounts?.length && accounts.length === 1) {\r\n      dispatch(setCurrentAccount(accounts[0].id));\r\n    }\r\n  }, [accounts, dispatch]);\r\n\r\n  const createAccount = () => {\r\n    dispatch(accountCreate());\r\n  };\r\n\r\n  return <div className=\"account__select\">\r\n    {accounts?.length && accounts.length > 1\r\n      ? <>\r\n        <SelectInput/>\r\n        <Divider/>\r\n      </>\r\n      : ''\r\n    }\r\n    <Button onClick={createAccount} text=\"Открыть счёт\" type='outline' size='full'/>\r\n  </div>;\r\n};\r\n\r\nexport default AccountSelect;","import { IOperation } from '../types/modelTypes';\r\n\r\nexport const filterOperation = (operation: IOperation, start: Date | null, end: Date | null) => {\r\n  const date = new Date(operation.date);\r\n  if (start && end) {\r\n    return date > start && date < end;\r\n  }\r\n  else if (start) {\r\n    return date > start;\r\n  }\r\n  else if (end) {\r\n    return date < end;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const sortByDate = (a: IOperation, b: IOperation) => {\r\n  if (a.date < b.date) {\r\n    return 1;\r\n  }\r\n  if (a.date > b.date) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const sortByType = (a: IOperation, b: IOperation) => {\r\n  if (a.operation_type > b.operation_type) {\r\n    return 1;\r\n  }\r\n  if (a.operation_type < b.operation_type) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const sortByAmount = (a: IOperation, b: IOperation) => {\r\n  if (a.amount > b.amount) {\r\n    return 1;\r\n  }\r\n  if (a.amount < b.amount) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n\r\n","import React from 'react';\r\nimport { format } from 'date-fns';\r\nimport { IOperation } from '../../types/modelTypes';\r\nimport { filterOperation, sortByDate } from '../../Services/OperationsSortService';\r\n\r\ninterface IAccountHistoryTableProps {\r\n  history: IOperation[],\r\n  start: Date | null,\r\n  end: Date | null,\r\n  currentId: number,\r\n  full?: boolean\r\n}\r\n\r\nconst AccountHistoryTable = ({ history, start, end, currentId, full }: IAccountHistoryTableProps) => {\r\n\r\n  const filterHistory = history.filter((operation) => filterOperation(operation, start, end));\r\n  const sortedHistory = filterHistory.sort(sortByDate);\r\n\r\n  const operations = sortedHistory.map(operation => {\r\n    if (operation.account_out_id === currentId) {\r\n      operation.amount = -operation.amount;\r\n    }\r\n    let date = format(new Date(operation.date), 'dd/MM/yyyy');\r\n    return (\r\n      <tr key={operation.date.toString()}>\r\n        <td>{date}</td>\r\n        <td>{operation.operation_type}</td>\r\n        <td>{operation.amount}</td>\r\n        {full ? <>\r\n          <td>{operation.account_out_id === 0 ? '-' : operation.account_out_id}</td>\r\n          <td>{operation.account_in_id}</td>\r\n        </> : <td></td>}\r\n      </tr>);\r\n  });\r\n  let tableType: string = 'account__table';\r\n  if (full) {\r\n    tableType += ' account__table-full';\r\n  }\r\n  return <div className={tableType}>\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <td>Дата</td>\r\n        <td>Тип</td>\r\n        {full ? <>\r\n          <td>Сумма</td>\r\n          <td>Счёт отправлителя</td>\r\n          <td>Счёт получателя</td>\r\n        </> : <td>Сумма</td>}\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      {operations}\r\n      </tbody>\r\n    </table>\r\n  </div>;\r\n};\r\n\r\nexport default AccountHistoryTable;","import React, { useState } from 'react';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { DatePicker } from 'antd';\r\nimport './AccountHistory.css';\r\nimport AccountHistoryTable from './AccountHistoryTable';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport locale from 'antd/es/date-picker/locale/ru_RU';\r\n\r\ninterface IAccountHistory {\r\n  full?: boolean\r\n}\r\n\r\nconst AccountHistory = ({ full }: IAccountHistory) => {\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  const history = useSelector((state: RootState) => state.account.history);\r\n  const current = useSelector((state: RootState) => state.account.currentAccount);\r\n  const pickDate = (event: any) => {\r\n    if (event) {\r\n      setStartDate(event[0]);\r\n      setEndDate(event[1]);\r\n    }\r\n    else {\r\n      setStartDate(null);\r\n      setEndDate(null);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"account__history\">\r\n      <h1>История операций по счёту</h1>\r\n      <DatePicker.RangePicker\r\n        locale={locale}\r\n        onCalendarChange={(e: any) => pickDate(e)}\r\n      />\r\n      {history && current\r\n        ? <AccountHistoryTable\r\n          history={history}\r\n          start={startDate}\r\n          end={endDate}\r\n          currentId={current.id}\r\n          full={full}/>\r\n        : 'Ошибка при загрузке истории платежей'\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountHistory;","import React from 'react';\r\nimport './AccountInfo.css';\r\nimport AccountCard from '../AccountCard';\r\nimport AccountSelect from '../AccountSelect';\r\nimport { useSelector } from 'react-redux';\r\nimport AccountHistory from '../AccountHistory';\r\n\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\n\r\nconst AccountInfo = () => {\r\n  const account = useSelector((state: RootState) => state.account);\r\n\r\n  return (\r\n    <div className=\"account\">\r\n      {account.currentAccount\r\n        ?\r\n        <>\r\n          <AccountCard account={account.currentAccount}/>\r\n          <AccountHistory full={false}/>\r\n        </>\r\n        :\r\n        <h2>Выберите счёт или создайте новый</h2>\r\n      }\r\n\r\n      <AccountSelect/>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountInfo;","import React, { useState } from 'react';\r\nimport Button from '../Button';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Modal } from 'antd';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { accountClose } from '../../redux/actions/accountActions';\r\n\r\ninterface IAccountClose {\r\n  id: string\r\n}\r\n\r\nconst AccountClose = ({ id }: IAccountClose) => {\r\n  const dispatch = useDispatch();\r\n  const [visible, setVisible] = useState(false);\r\n  const history = useHistory();\r\n  const openModal = () => {\r\n    setVisible(true);\r\n  };\r\n  const deleteAccount = () => {\r\n    dispatch(accountClose(+id));\r\n    history.push('/');\r\n  };\r\n\r\n  return <>\r\n    <Button onClick={openModal} text=\"Закрыть счёт\" type=\"danger\" size=\"content\"/>\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Закрытие счёта\"\r\n      onOk={deleteAccount}\r\n      onCancel={() => setVisible(false)}\r\n      footer={[\r\n        <Button key=\"back\" onClick={() => setVisible(false)} text=\"Отменить\" type=\"primary\" size=\"content\"/>,\r\n        <Button key=\"delete\" onClick={deleteAccount} text=\"Удалить\" type=\"danger\" size=\"content\"/>,\r\n      ]}\r\n    >\r\n      <p>Вы уверены, что хотите закрыть счёт?</p>\r\n    </Modal>\r\n  </>;\r\n};\r\n\r\nexport default AccountClose;","import React from 'react';\r\nimport './Input.css';\r\n\r\ninterface IInputProps {\r\n  label: string,\r\n  value: string,\r\n  type: string,\r\n  handler: (value: string) => void\r\n}\r\n\r\nconst Input = ({ label, value, handler, type }: IInputProps) => {\r\n  return <>\r\n    <label className=\"label\">{label}:</label>\r\n    <input className=\"input\"\r\n           type={type}\r\n           value={value}\r\n           onChange={(e) => handler(e.target.value)}/></>;\r\n};\r\n\r\nexport default Input;","import React, { FunctionComponent } from 'react';\r\nimport Button from '../Button';\r\nimport './Form.css';\r\n\r\ninterface IForm {\r\n  submitHandler: (e: React.FormEvent<HTMLFormElement>) => void,\r\n  header?: string,\r\n  buttonText: string\r\n}\r\n\r\nconst Form: FunctionComponent<IForm> = (props) => {\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={props.submitHandler}>\r\n      <h1 className=\"form__header\">{props.header}</h1>\r\n      {props.children}\r\n      <Button text={props.buttonText} type='primary' size='full' htmlType='submit'/>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;","import React, { useState } from 'react';\r\nimport { message } from 'antd';\r\nimport Input from '../Input';\r\nimport Form from '../Form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { accountTransfer } from '../../redux/actions/accountActions';\r\n\r\ninterface IAccountTransfer {\r\n  id: string\r\n}\r\n\r\nconst AccountTransfer = ({ id }: IAccountTransfer) => {\r\n  const dispatch = useDispatch();\r\n  const [amount, setAmount] = useState(0);\r\n  const [accountNumber, setAccountNumber] = useState(0);\r\n  const replenishmentHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (amount > 0) {\r\n      message.info(`Операция обрабатывается сервером`);\r\n      dispatch(accountTransfer(\r\n        {\r\n          accountOutId: +id,\r\n          accountInId: accountNumber,\r\n          amount,\r\n        },\r\n      ));\r\n\r\n    }\r\n    else {\r\n      message.error('Введите сумму больше 0');\r\n    }\r\n  };\r\n  return <Form submitHandler={replenishmentHandler} buttonText={'Отправить'}>\r\n\r\n    <Input label=\"Сумма\" value={amount.toString()} type=\"number\" handler={val => setAmount(+val)}/>\r\n    <Input label=\"Номер счёта получателя\" value={accountNumber.toString()} type=\"number\"\r\n           handler={val => setAccountNumber(+val)}/>\r\n  </Form>;\r\n};\r\n\r\nexport default AccountTransfer;","import React from 'react';\r\n\r\nimport './AccountTemplateCard.css';\r\n\r\ninterface IAccountTemplateCard {\r\n  id?: number\r\n  paymentName: string,\r\n  targetName: string,\r\n  targetEmail: string,\r\n  onClick: any\r\n}\r\n\r\nconst AccountTemplateCard = ({ paymentName, targetName, targetEmail, onClick, id }: IAccountTemplateCard) => {\r\n  return <div onClick={() => onClick({ paymentName, targetName, targetEmail })} className=\"account-template-card\">\r\n    <p>{paymentName}</p>\r\n    <p>{targetName}</p>\r\n    <p>{targetEmail}</p>\r\n  </div>;\r\n};\r\n\r\nexport default AccountTemplateCard;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { accountGetTemplatesRequest } from '../../redux/actions/accountActions';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport AccountTemplateCard from '../AccountTemplateCard';\r\nimport { IRequisite } from '../../types/modelTypes';\r\n\r\ninterface IAccountTemplates {\r\n  clickHandler: (e: IRequisite) => void\r\n  id: string,\r\n}\r\n\r\nconst AccountTemplates = (props: IAccountTemplates) => {\r\n  const dispatch = useDispatch();\r\n  const templates = useSelector((state: RootState) => state.account.templates);\r\n  useEffect(() => {\r\n    dispatch(accountGetTemplatesRequest());\r\n  }, [dispatch]);\r\n  let cards: any;\r\n\r\n  if (templates)\r\n    cards = templates.map(template => {\r\n      return <AccountTemplateCard onClick={props.clickHandler} key={template.targetName + template.id} id={template.id}\r\n                                  paymentName={template.paymentName}\r\n                                  targetName={template.targetName}\r\n                                  targetEmail={template.targetEmail}/>;\r\n    });\r\n\r\n  return (\r\n    <>\r\n      {cards}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AccountTemplates;","import React, { useState } from 'react';\r\nimport { message } from 'antd';\r\nimport Input from '../Input';\r\nimport { useDispatch } from 'react-redux';\r\nimport { accountPayment } from '../../redux/actions/accountActions';\r\nimport { IRequisite } from '../../types/modelTypes';\r\nimport './AccountPayment.css';\r\nimport AccountTemplates from '../AccountTemplates';\r\nimport Form from '../Form';\r\n\r\ninterface IAccountPayment {\r\n  id: string,\r\n  template?: IRequisite\r\n}\r\n\r\nconst AccountPayment = ({ id, template }: IAccountPayment) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [amount, setAmount] = useState(0);\r\n  const [purpose, setPurpose] = useState('');\r\n  const [targetEmail, setEmail] = useState('');\r\n  const [paymentName, setPaymentName] = useState('');\r\n  const [targetName, setTargetName] = useState('');\r\n\r\n  if (template) {\r\n    setEmail(template.targetEmail);\r\n    setPaymentName(template.paymentName);\r\n    setTargetName(template.targetName);\r\n  }\r\n\r\n  const PaymentHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (amount > 0) {\r\n      dispatch(accountPayment({\r\n        amount,\r\n        accountOutId: +id,\r\n        purpose,\r\n        requisite: {\r\n          paymentName,\r\n          targetEmail,\r\n          targetName,\r\n        },\r\n      }));\r\n      message.info('Платёж обрабаывается сервером');\r\n    }\r\n    else {\r\n      message.error('Введите сумму больше 0');\r\n    }\r\n  };\r\n\r\n  const clickHandler = (e: IRequisite) => {\r\n    setPaymentName(e.paymentName);\r\n    setTargetName(e.targetName);\r\n    setEmail(e.targetEmail);\r\n  };\r\n  return <div className='requisite-container'>\r\n\r\n    <div className='requisite-container__inputs'>\r\n      <Form submitHandler={PaymentHandler} buttonText=\"Отправить платёж\">\r\n        <Input label=\"Сумма\" value={amount.toString()} type=\"number\" handler={val => setAmount(+val)}/>\r\n        <Input label=\"Назначение платежа\" value={purpose} type=\"text\" handler={setPurpose}/>\r\n\r\n        <h3>Реквезиты</h3>\r\n\r\n        <Input label=\"Название платеж\" value={paymentName} type=\"text\" handler={setPaymentName}/>\r\n        <Input label=\"Название на кого платеж\" value={targetName} type=\"text\" handler={setTargetName}/>\r\n        <Input label=\"email получателя\" value={targetEmail} type=\"text\" handler={setEmail}/>\r\n\r\n\r\n      </Form>\r\n    </div>\r\n    <div className='requisite-container__templates'>\r\n      <h2>Шаблоны платежей</h2>\r\n      <AccountTemplates clickHandler={clickHandler} id={id}/>\r\n    </div>\r\n  </div>;\r\n};\r\n\r\nexport default AccountPayment;\r\n\r\n","import React from 'react';\r\nimport { IUser } from '../../types/modelTypes';\r\n\r\nconst UserCard = ({ name, email }: IUser) => {\r\n  return <div>\r\n    <h2>{name}</h2>\r\n    <h2>{email}</h2>\r\n  </div>;\r\n};\r\n\r\nexport default UserCard;","import React, { useEffect } from 'react';\r\nimport AccountCard from '../AccountCard';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport AccountHistory from '../AccountHistory';\r\nimport { setCurrentAccount } from '../../redux/actions/accountActions';\r\nimport UserCard from '../UserCard';\r\n\r\ninterface IAccountStatement {\r\n  id: string\r\n}\r\n\r\nconst AccountStatement = ({ id }: IAccountStatement) => {\r\n  const dispatch = useDispatch();\r\n  const account = useSelector((state: RootState) => state.account);\r\n  const user = useSelector((state: RootState) => state.user.data);\r\n  useEffect(() => {\r\n    dispatch(setCurrentAccount(+id));\r\n  }, [id, dispatch]);\r\n  return <>\r\n    {account.currentAccount && account.history\r\n      ? <>\r\n        <UserCard name={user.name} img={user.img} email={user.email}/>\r\n        <AccountCard account={account.currentAccount} disableButton/>\r\n        <AccountHistory full/>\r\n      </>\r\n      : ''\r\n    }</>;\r\n};\r\n\r\nexport default AccountStatement;","import React, { useState } from 'react';\r\nimport { message } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { accountReplenishment } from '../../redux/actions/accountActions';\r\nimport Form from '../Form';\r\nimport Input from '../Input';\r\n\r\ninterface IAccountReplenishment {\r\n  id: string\r\n}\r\n\r\nconst AccountReplenishment = ({ id }: IAccountReplenishment) => {\r\n  const dispatch = useDispatch();\r\n  const [amount, setAmount] = useState(0);\r\n  const replenishmentHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (amount > 0) {\r\n      dispatch(accountReplenishment({ accountId: +id, amount }));\r\n      message.info(`Операция отправлена на обработку серевером`);\r\n    }\r\n    else {\r\n      message.error('Введите сумму больше 0');\r\n    }\r\n  };\r\n  return (\r\n    <Form submitHandler={replenishmentHandler} buttonText={'пополнить'}>\r\n      <Input label=\"Сумма\" value={amount.toString()} type=\"number\" handler={val => setAmount(+val)}/>\r\n    </Form>\r\n  );\r\n\r\n};\r\n\r\nexport default AccountReplenishment;","import React, { useState } from 'react';\r\nimport Form from '../Form';\r\nimport Input from '../Input';\r\nimport { useDispatch } from 'react-redux';\r\nimport { accountTemplateCreateRequest } from '../../redux/actions/accountActions';\r\nimport { IRequisite } from '../../types/modelTypes';\r\nimport { message } from 'antd';\r\n\r\ninterface IAccountCreateTemplate {\r\n  id: number\r\n}\r\n\r\nconst AccountCreateTemplate = ({ id }: IAccountCreateTemplate) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [targetEmail, setEmail] = useState('');\r\n  const [paymentName, setPaymentName] = useState('');\r\n  const [targetName, setTargetName] = useState('');\r\n\r\n  const createTemplate = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const requisite: IRequisite = {\r\n      targetEmail,\r\n      targetName,\r\n      paymentName,\r\n    };\r\n    dispatch(accountTemplateCreateRequest(requisite));\r\n    message.info('Ваш запрос на создание шаблона обрабатывается сервером');\r\n  };\r\n  return <Form submitHandler={createTemplate} buttonText=\"Создать шаблон\">\r\n    <Input label=\"Название платеж\" value={paymentName} type=\"text\" handler={setPaymentName}/>\r\n    <Input label=\"Название на кого платеж\" value={targetName} type=\"text\" handler={setTargetName}/>\r\n    <Input label=\"email получателя\" value={targetEmail} type=\"text\" handler={setEmail}/>\r\n  </Form>;\r\n};\r\n\r\nexport default AccountCreateTemplate;","import React from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Tabs } from 'antd';\r\nimport AccountClose from '../componets/AccountClose';\r\nimport AccountTransfer from '../componets/AccountTransfer';\r\nimport AccountPayment from '../componets/AccountPayment';\r\nimport AccountStatement from '../componets/AccountStatement';\r\nimport AccountReplenishment from '../componets/AccountReplenishment';\r\nimport Button from '../componets/Button';\r\nimport AccountCreateTemplate from '../componets/AccountCreateTemplate';\r\n\r\ninterface IParamType {\r\n  id: string\r\n}\r\n\r\nconst AccountPage = () => {\r\n  const id = useParams<IParamType>().id;\r\n  return (\r\n    <>\r\n      <Link to='/'><Button text=\"Назад\" type=\"outline\" size=\"content\"/></Link>\r\n      <h1 style={{ marginTop: 25 }}>Счёт: {id}</h1>\r\n      <Tabs defaultActiveKey=\"1\" style={{ padding: 10 }}>\r\n        <Tabs.TabPane tab=\"Пополнение\" key=\"1\">\r\n          <AccountReplenishment id={id}/>\r\n        </Tabs.TabPane>\r\n        <Tabs.TabPane tab=\"Перевод\" key=\"2\">\r\n          <AccountTransfer id={id}/>\r\n        </Tabs.TabPane>\r\n        <Tabs.TabPane tab=\"Платёж\" key=\"3\">\r\n          <AccountPayment id={id}/>\r\n        </Tabs.TabPane>\r\n        <Tabs.TabPane tab=\"Выписка\" key=\"4\">\r\n          <AccountStatement id={id}/>\r\n        </Tabs.TabPane>\r\n        <Tabs.TabPane tab=\"Создание шаблона платежа\" key=\"5\">\r\n          <AccountCreateTemplate id={+id}/>\r\n        </Tabs.TabPane>\r\n        <Tabs.TabPane tab=\"Закрытие\" key=\"6\">\r\n          <AccountClose id={id}/>\r\n        </Tabs.TabPane>\r\n      </Tabs>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AccountPage;","import React, { useEffect, useState } from 'react';\r\nimport Input from '../Input';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport { userUpdateRequest } from '../../redux/actions/userActions';\r\nimport Form from '../Form';\r\n\r\nconst UserMainData = () => {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state: RootState) => state.user);\r\n  const [email, setEmail] = useState('');\r\n  const [name, setName] = useState('');\r\n  useEffect(() => {\r\n    if (user.data.email && user.data.name) {\r\n      setEmail(user.data.email);\r\n      setName(user.data.name);\r\n    }\r\n  }, [user]);\r\n\r\n  const signIn = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(userUpdateRequest({ email, name, img: user.data.img }));\r\n\r\n  };\r\n  return (\r\n    <Form submitHandler={signIn} buttonText=\"Обновить данные\">\r\n      <h1>Обновление пользователя</h1>\r\n      <Input label={'имя'} value={name} type='input' handler={setName}/>\r\n      <Input label={'email'} value={email} type='input' handler={setEmail}/>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UserMainData;","import React, { ChangeEvent } from 'react';\r\nimport './FileInput.css';\r\n\r\ninterface IFileInput {\r\n  onChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\n//Тут должна быть красивая стилизация инпута, но её нет\r\nconst FileInput = ({ onChangeHandler }: IFileInput) => {\r\n  return <input className=\"file-input\" name=\"file\" id=\"file\" type=\"file\" onChange={onChangeHandler}/>;\r\n};\r\n\r\nexport default FileInput;","import React, { ChangeEvent } from 'react';\r\n\r\nimport Form from '../Form';\r\nimport FileInput from '../FileInput';\r\nimport { useDispatch } from 'react-redux';\r\nimport { userUpdateImageRequest } from '../../redux/actions/userActions';\r\n\r\nconst UserUploadImg = () => {\r\n  const dispatch = useDispatch();\r\n  let file: File;\r\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(userUpdateImageRequest(file));\r\n  };\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files)\r\n      file = e.target.files[0];\r\n\r\n  };\r\n\r\n  return (\r\n    <Form submitHandler={submitHandler} buttonText={'Сменить изображение профиля'}>\r\n      <FileInput onChangeHandler={onChangeHandler}/>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default UserUploadImg;","import React, { useState } from 'react';\r\nimport Button from '../Button';\r\nimport { useDispatch } from 'react-redux';\r\nimport { userDeleteRequest } from '../../redux/actions/userActions';\r\nimport { message, Modal } from 'antd';\r\n\r\nconst UserSuicide = () => {\r\n  const dispatch = useDispatch();\r\n  const [visible, setVisible] = useState(false);\r\n  const openModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const deleteAccount = () => {\r\n    message.info('Ваш запрос обрабатывается сервером');\r\n    dispatch(userDeleteRequest);\r\n  };\r\n  return <>\r\n    <Button onClick={openModal} text=\"Удалить профиль\" type='danger' size=\"content\"/>\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Удаление профиля\"\r\n      onOk={deleteAccount}\r\n      onCancel={() => setVisible(false)}\r\n      footer={[\r\n        <Button key=\"back\" onClick={() => setVisible(false)} text=\"Отменить\" type=\"primary\" size=\"content\"/>,\r\n        <Button key=\"delete\" onClick={deleteAccount} text=\"Удалить\" type=\"danger\" size=\"content\"/>,\r\n      ]}\r\n    >\r\n      <p>Вы уверены, что хотите удалить свой профиль?</p>\r\n    </Modal></>;\r\n};\r\n\r\nexport default UserSuicide;","import React from 'react';\r\nimport { Tabs } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport UserMainData from '../componets/UserMainData';\r\nimport UserUploadImg from '../componets/UserUploadImg';\r\nimport UserDelete from '../componets/UserDelete';\r\nimport Button from '../componets/Button';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst UserPage = () => {\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/\"><Button text=\"Назад\" size=\"content\" type=\"outline\"/></Link>\r\n      <Tabs defaultActiveKey=\"1\">\r\n\r\n        <TabPane tab=\"Основное\" key=\"1\">\r\n          <UserMainData/>\r\n        </TabPane>\r\n        <TabPane tab=\"Сменить изображение\" key=\"2\">\r\n          <UserUploadImg/>\r\n        </TabPane>\r\n        <TabPane tab=\"Удалить профиль\" key=\"3\">\r\n          <UserDelete/>\r\n        </TabPane>\r\n      </Tabs>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserPage;","import React from 'react';\r\nimport Header from '../componets/Header';\r\nimport AccountInfo from '../componets/AccountInfo';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../redux/reducers/rootReducer';\r\nimport AccountPage from './AccountPage';\r\nimport UserPage from './UserPage';\r\n\r\nconst MainPage = () => {\r\n  const login = useSelector((state: RootState) => state.login);\r\n\r\n  return (\r\n    <>\r\n      {!login.isLogin && login.loginError\r\n        ? <Redirect to=\"/login\"/>\r\n        : <>\r\n          <Header/>\r\n          <Switch>\r\n            <Route exact path='/'>\r\n              <AccountInfo/>\r\n            </Route>\r\n            <Route path='/update-user'>\r\n              <UserPage/>\r\n            </Route>\r\n            <Route path={`/account/:id`}>\r\n              <AccountPage/>\r\n            </Route>\r\n          </Switch>\r\n        </>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { loginRequest } from '../../redux/actions/loginActions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Input from '../Input';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport Form from '../Form';\r\n\r\nconst LoginForm = () => {\r\n  const dispatch = useDispatch();\r\n  const isLogin = useSelector((state: RootState) => state.login.isLogin);\r\n  let history = useHistory();\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const signIn = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(loginRequest(email, password));\r\n    if (isLogin) {\r\n      history.push('/');\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n    <Form buttonText=\"Войти\" submitHandler={signIn}>\r\n      <h2>Войдите в систему</h2>\r\n      <Input type=\"email\" label=\"Email\" value={email} handler={setEmail}/>\r\n      <Input type=\"password\" label=\"Пароль\" value={password} handler={setPassword}/>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default LoginForm;","import { LOGIN_CHECK_TOKEN, LOGIN_ERROR, LOGIN_REQUEST, LOGIN_SUCCESS, REGISTRATION_REQUEST } from '../types';\r\nimport {\r\n  ILoginCheckToken,\r\n  ILoginError,\r\n  ILoginRequest,\r\n  ILoginSuccess,\r\n  IRegistrationRequest,\r\n} from '../../types/actionTypes/LoginActionTypes';\r\n\r\nexport const loginRequest = (email: string, password: string): ILoginRequest => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n    data: {\r\n      email,\r\n      password,\r\n    },\r\n  };\r\n};\r\n\r\nexport const loginSuccess = (): ILoginSuccess => {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n  };\r\n};\r\n\r\nexport const loginCheckToken = (): ILoginCheckToken => {\r\n  return {\r\n    type: LOGIN_CHECK_TOKEN,\r\n  };\r\n};\r\n\r\nexport const loginError = (): ILoginError => {\r\n  return {\r\n    type: LOGIN_ERROR,\r\n  };\r\n};\r\n\r\nexport const registrationRequest = (email: string, name: string, password: string): IRegistrationRequest => {\r\n  return {\r\n    type: REGISTRATION_REQUEST,\r\n    data: { email, name, password },\r\n  };\r\n};\r\n\r\nexport type LoginActions =\r\n  ILoginRequest\r\n  | ILoginSuccess\r\n  | ILoginCheckToken\r\n  | ILoginError\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport LoginForm from '../componets/LoginForm';\r\nimport { RootState } from '../redux/reducers/rootReducer';\r\nimport Button from '../componets/Button';\r\n\r\nconst LoginPage = () => {\r\n  const isLogin = useSelector((state: RootState) => state.login.isLogin);\r\n\r\n  return (\r\n    <>\r\n      {isLogin\r\n        ? <Redirect to=\"/\"/>\r\n        : <div style={{ textAlign: 'center' }}>\r\n          <LoginForm/>\r\n          <Link to=\"/registration\">\r\n            <Button text=\"Регистрация\" size=\"content\" type=\"outline\"/>\r\n          </Link>\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginPage;","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { registrationRequest } from '../../redux/actions/loginActions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Input from '../Input';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport Form from '../Form';\r\n\r\nconst RegistrationForm = () => {\r\n  const dispatch = useDispatch();\r\n  const isLogin = useSelector((state: RootState) => state.login.isLogin);\r\n  let history = useHistory();\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [name, setName] = useState('');\r\n\r\n  const signUp = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(registrationRequest(email, name, password));\r\n    if (isLogin) {\r\n      history.push('/login');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form buttonText=\"Регистрация\" submitHandler={signUp}>\r\n      <h2>Регистрация</h2>\r\n      <Input type=\"text\" label=\"Имя\" value={name} handler={setName}/>\r\n      <Input type=\"email\" label=\"Email\" value={email} handler={setEmail}/>\r\n      <Input type=\"password\" label=\"Пароль\" value={password} handler={setPassword}/>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm;","import React from 'react';\r\nimport RegistrationForm from '../componets/RegistrationForm';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '../componets/Button';\r\n\r\nconst RegistrationPage = () => {\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <RegistrationForm/>\r\n      <Link to=\"/login\">\r\n        <Button text=\"Вход\" type=\"outline\" size=\"content\"/>\r\n      </Link>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default RegistrationPage;","import React from 'react';\r\nimport './App.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport MainPage from './pages/mainPage';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegistrationPage from './pages/RegistrationPage';\r\nimport { loginCheckToken, loginError } from './redux/actions/loginActions';\r\nimport { RootState } from './redux/reducers/rootReducer';\r\n\r\nfunction App () {\r\n  const login = useSelector((state: RootState) => state.login);\r\n  const dispatch = useDispatch();\r\n  const token = localStorage.getItem('jwt');\r\n  if (!token && !login.loginError) {\r\n    dispatch(loginError());\r\n  }\r\n  if (token && !login.isLogin) {\r\n    dispatch(loginCheckToken());\r\n  }\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <Switch>\r\n        <Route exact path=\"/login\"><LoginPage/></Route>\r\n        <Route exact path=\"/registration\"><RegistrationPage/></Route>\r\n        <Route path=\"/\">\r\n          <MainPage/>\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export interface IUser {\r\n  name: string | null,\r\n  img: string | null,\r\n  email: string | null\r\n}\r\n\r\nexport interface IAccount {\r\n  id: number,\r\n  balance: number\r\n}\r\n\r\nexport interface IOperation {\r\n  id: number,\r\n  amount: number,\r\n  date: Date,\r\n  operation_type: string,\r\n  account_in_id: number | null,\r\n  account_out_id: number | null,\r\n  requisite: number | null\r\n}\r\n\r\nexport interface IReplenishmentRequest {\r\n  amount: number,\r\n  accountId: number\r\n}\r\n\r\nexport interface ITransferRequest {\r\n  amount: number,\r\n  accountInId: number,\r\n  accountOutId: number\r\n}\r\n\r\nexport interface IRequisite {\r\n  id?: number,\r\n  paymentName: string,\r\n  targetName: string,\r\n  targetEmail: string\r\n}\r\n\r\nexport interface IPaymentRequest {\r\n  amount: number,\r\n  accountOutId: number,\r\n  purpose: string,\r\n  requisite: IRequisite\r\n}\r\n\r\nexport interface IRegistrationData {\r\n  name: string,\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface ILoginData {\r\n  email: string,\r\n  password: string\r\n}\r\n\r\nexport interface ITokenResponse {\r\n  access_token: string,\r\n  expired_to: Date\r\n}\r\n\r\nexport type LoginPostData = IRegistrationData | ILoginData;\r\n\r\nexport enum Method {\r\n  Get = 'GET',\r\n  Post = 'POST',\r\n  Put = 'PUT',\r\n  Patch = 'PATCH',\r\n  Delete = 'DELETE'\r\n\r\n}","import { LOGIN_ERROR, LOGIN_SUCCESS } from '../types';\r\nimport { ILoginStore } from '../../types/storeTypes';\r\nimport { LoginActions } from '../actions/loginActions';\r\n\r\nconst initialState: ILoginStore = {\r\n  isLogin: false,\r\n  loginError: false,\r\n};\r\n\r\nexport const loginReducer = (state = initialState, action: LoginActions) => {\r\n  switch (action.type) {\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLogin: true,\r\n        loginError: false,\r\n      };\r\n    case LOGIN_ERROR:\r\n      return {\r\n        ...state,\r\n        isLogin: false,\r\n        loginError: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import { USER_LOAD_SUCCESS } from '../types';\r\nimport { IUser } from '../../types/modelTypes';\r\n\r\nimport { UserActions } from '../actions/userActions';\r\nimport { IUserStore } from '../../types/storeTypes';\r\n\r\nconst initialData: IUser = {\r\n  img: null,\r\n  name: null,\r\n  email: null,\r\n};\r\n\r\n//TODO Индикатор загрузки пользователя\r\nconst initialState: IUserStore = {\r\n  data: initialData,\r\n};\r\n\r\nexport const userReducer = (state = initialState, action: UserActions): IUserStore => {\r\n  switch (action.type) {\r\n    case USER_LOAD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        data: {\r\n          ...state.data,\r\n          ...action.user,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import {\r\n  ACCOUNT_CURRENT_SUCCESS,\r\n  ACCOUNT_HISTORY_SUCCESS,\r\n  ACCOUNT_MIN_SUCCESS,\r\n  ACCOUNT_TEMPLATES_SUCCESS,\r\n} from '../types';\r\nimport { IAccountStore } from '../../types/storeTypes';\r\nimport { AccountActions } from '../actions/accountActions';\r\n\r\nconst initialState: IAccountStore = {\r\n  currentAccount: null,\r\n  accounts: [],\r\n  history: [],\r\n  templates: [],\r\n};\r\n\r\nexport const accountReducer = (state = initialState, action: AccountActions): IAccountStore => {\r\n  switch (action.type) {\r\n    case ACCOUNT_CURRENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentAccount: action.account,\r\n      };\r\n    case ACCOUNT_MIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        accounts: action.accounts,\r\n      };\r\n    case ACCOUNT_HISTORY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        history: action.operations,\r\n\r\n      };\r\n    case ACCOUNT_TEMPLATES_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        templates: action.templates,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};","import { combineReducers } from 'redux';\r\nimport { loginReducer } from './loginReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { accountReducer } from './accountReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  login: loginReducer,\r\n  user: userReducer,\r\n  account: accountReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import { Method } from '../types/modelTypes';\r\n\r\nexport interface IRequestService {\r\n  getRequest: <T>(url: string) => Promise<T>,\r\n  postRequest: <T>(url: string, data: T) => void\r\n  putRequest: <T>(url: string, data: T) => void\r\n  patchRequest: <T>(url: string, data: T) => void\r\n  deleteRequest: <T>(url: string) => void\r\n}\r\n\r\nexport default class RequestService implements IRequestService {\r\n  private readonly requestHeaders: HeadersInit = {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n  };\r\n  private Request = async <T> (url: string, method: Method, data?: T): Promise<Response> => {\r\n\r\n    const response = await fetch(`http://localhost:51870/api/${url}`, {\r\n      method,\r\n      headers: this.requestHeaders,\r\n      body: JSON.stringify(data),\r\n    });\r\n    if (!response.ok) throw new Error('Ошибка');\r\n    return response;\r\n  };\r\n\r\n  getRequest = async <T> (url: string): Promise<T> => {\r\n    return await this.Request(url, Method.Get).then(res => res.json());\r\n  };\r\n\r\n  postRequest = async <T> (url: string, data: T) => {\r\n    await this.Request<T>(url, Method.Post, data);\r\n  };\r\n\r\n  putRequest = async <T> (url: string, data: T) => {\r\n    await this.Request<T>(url, Method.Put, data);\r\n  };\r\n  patchRequest = async <T> (url: string, data: T) => {\r\n    await this.Request<T>(url, Method.Patch, data);\r\n  };\r\n  deleteRequest = async <T> (url: string) => {\r\n    await this.Request<T>(url, Method.Delete);\r\n  };\r\n}\r\n\r\n\r\n","import { IAccount, IOperation, IRequisite } from '../types/modelTypes';\r\nimport RequestService, { IRequestService } from '../Services/Request';\r\n\r\nexport default class AccountAPI {\r\n\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  private MapRequisite = (data: any): IRequisite => {\r\n    return {\r\n      paymentName: data.payment_name,\r\n      targetName: data.target_name,\r\n      targetEmail: data.target_email,\r\n    };\r\n  };\r\n\r\n  private MapRequisiteRevers = (requisite: IRequisite): any => {\r\n    return {\r\n      payment_name: requisite.paymentName,\r\n      target_name: requisite.targetName,\r\n      target_email: requisite.targetEmail,\r\n    };\r\n  };\r\n\r\n  getAccountInfo = async (accountId: number): Promise<IAccount> => {\r\n    return await this.requestService.getRequest<IAccount>(`accounts/${accountId}`);\r\n  };\r\n  getAccounts = async (): Promise<IAccount[]> => {\r\n    return await this.requestService.getRequest<IAccount[]>('accounts');\r\n  };\r\n  getHistory = async (accountId: number): Promise<IOperation[]> => {\r\n    return await this.requestService.getRequest<IOperation[]>(`accounts/${accountId}/operations`);\r\n  };\r\n\r\n  createAccount = async () => {\r\n    await this.requestService.postRequest(`accounts`, {});\r\n  };\r\n\r\n  closeAccount = async (accountId: number) => {\r\n    await this.requestService.deleteRequest(`accounts/${accountId}`);\r\n  };\r\n\r\n  replenishment = async (accountId: number, amount: number) => {\r\n    await this.requestService.postRequest(`accounts/${accountId}/replenishment`, { amount });\r\n  };\r\n  transfer = async (account_out_id: number, account_in_id: number, amount: number) => {\r\n    await this.requestService.postRequest(`accounts/${account_out_id}/transfer`,\r\n      {\r\n        amount,\r\n        account_in_id,\r\n        account_out_id,\r\n      });\r\n  };\r\n  payment = async (account_out_id: number, amount: number, purpose: string, requisite: IRequisite) => {\r\n    await this.requestService.postRequest(`accounts/${account_out_id}/payment`, {\r\n      amount,\r\n      purpose,\r\n      account_out_id,\r\n      requisite: this.MapRequisiteRevers(requisite),\r\n    });\r\n  };\r\n\r\n  getTemplates = async (): Promise<IRequisite[]> => {\r\n    const requisitesResponse: any[] = await this.requestService.getRequest('accounts/templates');\r\n    return requisitesResponse.map(data => {\r\n      return this.MapRequisite(data);\r\n    });\r\n  };\r\n  createTemplate = async (requisite: IRequisite) => {\r\n    await this.requestService.postRequest('accounts/templates',\r\n      this.MapRequisiteRevers(requisite));\r\n  };\r\n\r\n}","import { put, takeEvery } from 'redux-saga/effects';\r\nimport {\r\n  ACCOUNT_CLOSE_REQUEST,\r\n  ACCOUNT_CREATE_REQUEST,\r\n  ACCOUNT_MIN_REQUEST,\r\n  ACCOUNT_PAYMENT_REQUEST,\r\n  ACCOUNT_REPLENISHMENT_REQUEST,\r\n  ACCOUNT_SET_CURRENT,\r\n  ACCOUNT_TEMPLATE_CREATE_REQUEST,\r\n  ACCOUNT_TEMPLATES_REQUEST,\r\n  ACCOUNT_TRANSFER_REQUEST,\r\n} from '../types';\r\nimport AccountAPI from '../../API/AccountAPI';\r\nimport {\r\n  accountGetTemplatesSuccess,\r\n  accountHistorySuccess,\r\n  accountsMinRequest,\r\n  accountsMinSuccess,\r\n  currentAccountSuccess,\r\n} from '../actions/accountActions';\r\nimport { IAccount, IOperation, IRequisite } from '../../types/modelTypes';\r\nimport {\r\n  IAccountClose,\r\n  IAccountPayment,\r\n  IAccountReplenishment,\r\n  IAccountTemplateCreateRequest,\r\n  IAccountTransfer,\r\n  ISetCurrentAccount,\r\n} from '../../types/actionTypes/AccountActionTypes';\r\nimport { message } from 'antd';\r\n\r\nfunction * loadCurrentAccount (action: ISetCurrentAccount) {\r\n  const accountAPI = new AccountAPI();\r\n  try {\r\n    const accountData: IAccount = yield  accountAPI.getAccountInfo(action.id).then(res => res);\r\n    yield put(currentAccountSuccess(accountData));\r\n  }\r\n  catch {\r\n    yield  message.error('Не удалось загрузить выбранный счёт');\r\n  }\r\n\r\n  try {\r\n    const history: IOperation[] = yield accountAPI.getHistory(action.id).then(res => res);\r\n    yield put(accountHistorySuccess(history));\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось загрузить историю операций');\r\n  }\r\n\r\n}\r\n\r\nfunction * loadMinAccounts () {\r\n  try {\r\n    const accountAPI = new AccountAPI();\r\n    const data: IAccount[] = yield  accountAPI.getAccounts().then(res => res);\r\n    yield put(accountsMinSuccess(data));\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось загрузить список счетов');\r\n  }\r\n}\r\n\r\nfunction * closeAccount (action: IAccountClose) {\r\n  try {\r\n    const accountAPI = new AccountAPI();\r\n    yield accountAPI.closeAccount(action.accountId);\r\n    yield put(accountsMinRequest());\r\n    yield message.success('счёт успешно закрыт');\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось закрыть счёт');\r\n  }\r\n}\r\n\r\nfunction * replenishment (action: IAccountReplenishment) {\r\n  try {\r\n    const accountAPI = new AccountAPI();\r\n    yield accountAPI.replenishment(action.data.accountId, action.data.amount);\r\n    yield put(accountsMinRequest());\r\n    yield message.success('Операция прошла успешно');\r\n\r\n  }\r\n  catch {\r\n    yield  message.error('Не удалось выполнить операцию');\r\n  }\r\n}\r\n\r\nfunction * transfer (action: IAccountTransfer) {\r\n  try {\r\n    const accountAPI = new AccountAPI();\r\n    yield accountAPI.transfer(action.data.accountOutId, action.data.accountInId, action.data.amount);\r\n    yield put(accountsMinRequest());\r\n    yield message.success('Операция прошла успешно');\r\n\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось выполнить операцию');\r\n  }\r\n}\r\n\r\nfunction * payment (action: IAccountPayment) {\r\n  try {\r\n    const accountAPI = new AccountAPI();\r\n    yield accountAPI.payment(action.data.accountOutId, action.data.amount, action.data.purpose, action.data.requisite);\r\n    yield put(accountsMinRequest());\r\n    yield message.success('Операция прошла успешно');\r\n\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось выполнить операцию');\r\n  }\r\n}\r\n\r\nfunction * createAccount () {\r\n  try {\r\n    const accountAPI = new AccountAPI();\r\n    yield accountAPI.createAccount();\r\n    yield put(accountsMinRequest());\r\n    yield message.success('Счёт успешно создан');\r\n\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось создать счёт');\r\n  }\r\n}\r\n\r\nfunction * loadTemplates () {\r\n  try {\r\n    const accountAPI = new AccountAPI();\r\n    const templates: IRequisite[] = yield accountAPI.getTemplates();\r\n    yield put(accountGetTemplatesSuccess(templates));\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось загрузить шаблоны платежа');\r\n  }\r\n}\r\n\r\nfunction * createTemplate (action: IAccountTemplateCreateRequest) {\r\n  try {\r\n    const accountAPI = new AccountAPI();\r\n    yield accountAPI.createTemplate(action.template);\r\n    yield message.success('Шаблон платежа успешно создан');\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось создать шаблон платежа');\r\n  }\r\n}\r\n\r\nfunction * accountSaga () {\r\n  yield takeEvery(ACCOUNT_SET_CURRENT, loadCurrentAccount);\r\n  yield takeEvery(ACCOUNT_MIN_REQUEST, loadMinAccounts);\r\n  yield takeEvery(ACCOUNT_CLOSE_REQUEST, closeAccount);\r\n  yield takeEvery(ACCOUNT_CREATE_REQUEST, createAccount);\r\n  yield takeEvery(ACCOUNT_REPLENISHMENT_REQUEST, replenishment);\r\n  yield takeEvery(ACCOUNT_TRANSFER_REQUEST, transfer);\r\n  yield takeEvery(ACCOUNT_PAYMENT_REQUEST, payment);\r\n  yield takeEvery(ACCOUNT_TEMPLATES_REQUEST, loadTemplates);\r\n  yield takeEvery(ACCOUNT_TEMPLATE_CREATE_REQUEST, createTemplate);\r\n}\r\n\r\nexport default accountSaga;","export const ImageUploadService = async (image: File) => {\r\n  const requestHeaders: HeadersInit = {\r\n    Authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n  };\r\n  let formData = new FormData();\r\n  formData.append('uploadedFile', image);\r\n\r\n  await fetch('http://localhost:51870/api/users/current/img', {\r\n    method: 'PATCH',\r\n    headers: requestHeaders,\r\n    body: formData,\r\n    redirect: 'follow',\r\n  });\r\n};","import { IUser } from '../types/modelTypes';\r\nimport RequestService, { IRequestService } from '../Services/Request';\r\nimport { ImageUploadService } from '../Services/imageUploadService';\r\n\r\nexport default class UserAPI {\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  getUser = async (): Promise<IUser> => {\r\n    return await this.requestService.getRequest<IUser>('users/current');\r\n  };\r\n\r\n  putUser = async (updatedUser: IUser) => {\r\n    await this.requestService.putRequest<IUser>('users', updatedUser);\r\n  };\r\n  changeUserImage = async (image: File) => {\r\n    await ImageUploadService(image);\r\n  };\r\n\r\n  deleteUser = async () => {\r\n    await this.requestService.deleteRequest('users/current');\r\n  };\r\n}\r\n\r\n\r\n","import { put, takeEvery } from 'redux-saga/effects';\r\nimport { USER_CHANGE_IMAGE_REQUEST, USER_DELETE_REQUEST, USER_REQUEST, USER_UPDATE_REQUEST } from '../types';\r\nimport UserAPI from '../../API/UserAPI';\r\nimport { userLoadSuccess, userRequest } from '../actions/userActions';\r\nimport { IUser } from '../../types/modelTypes';\r\nimport { IUserUpdate, IUserUpdateImageRequest } from '../../types/actionTypes/UserActionTypes';\r\nimport { message } from 'antd';\r\n\r\nfunction * loadUser () {\r\n  try {\r\n    const userAPI = new UserAPI();\r\n    const data: IUser = yield userAPI.getUser().then(res => res);\r\n    yield put(userLoadSuccess(data));\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось загрузить данные пользователя');\r\n  }\r\n}\r\n\r\nfunction * updateUser (action: IUserUpdate) {\r\n\r\n  try {\r\n    const userAPI = new UserAPI();\r\n    yield userAPI.putUser(action.updatedUser);\r\n    yield message.success('Данные успешно изменены');\r\n    yield put(userRequest());\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось изменить данные пользователя');\r\n  }\r\n}\r\n\r\nfunction * updateImage (action: IUserUpdateImageRequest) {\r\n  try {\r\n    const userAPI = new UserAPI();\r\n    yield userAPI.changeUserImage(action.image);\r\n    yield message.success('Изображение успешно обновлено');\r\n    yield put(userRequest());\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось обновить изображение');\r\n  }\r\n}\r\n\r\nfunction * deleteUser () {\r\n  try {\r\n    const userAPI = new UserAPI();\r\n    yield userAPI.deleteUser();\r\n    yield message.success('Ну вот и всё');\r\n    yield localStorage.removeItem('jwt');\r\n\r\n  }\r\n  catch {\r\n    yield message.error('Не удалось удалить пользователя');\r\n  }\r\n}\r\n\r\nfunction * userSaga () {\r\n  yield takeEvery(USER_REQUEST, loadUser);\r\n  yield takeEvery(USER_UPDATE_REQUEST, updateUser);\r\n  yield takeEvery(USER_CHANGE_IMAGE_REQUEST, updateImage);\r\n  yield takeEvery(USER_DELETE_REQUEST, deleteUser);\r\n}\r\n\r\nexport default userSaga;","import { IRegistrationData, ITokenResponse, LoginPostData } from '../types/modelTypes';\r\nimport RequestService, { IRequestService } from '../Services/Request';\r\n\r\nexport default class LoginAPI {\r\n\r\n  private readonly requestService: IRequestService;\r\n\r\n  constructor () {\r\n    this.requestService = new RequestService();\r\n  }\r\n\r\n  private PostRequest = async (url: string, data: LoginPostData) => {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return response.json();\r\n  };\r\n\r\n  private GetRequest = async (url: string) => {\r\n    const response = await fetch(url, {\r\n      method: 'Get',\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n      },\r\n    });\r\n    if (response.ok) {\r\n      return response;\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  checkToken = async () => {\r\n    const result = await this.GetRequest('http://localhost:51870/api/auth/checktoken');\r\n    if (result) {\r\n      return 'token is valid';\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  login = async (email: string, password: string): Promise<ITokenResponse> => {\r\n    return await this.PostRequest(\r\n      'http://localhost:51870/api/auth',\r\n      {\r\n        email,\r\n        password,\r\n      });\r\n\r\n  };\r\n  createUser = async ({ name, email, password }: IRegistrationData) => {\r\n    await this.requestService.postRequest<IRegistrationData>('users', { name, email, password });\r\n  };\r\n\r\n}","import { put, takeEvery } from 'redux-saga/effects';\r\nimport { LOGIN_CHECK_TOKEN, LOGIN_REQUEST, REGISTRATION_REQUEST } from '../types';\r\nimport { loginCheckToken, loginError, loginSuccess } from '../actions/loginActions';\r\nimport LoginAPI from '../../API/LoginAPI';\r\n\r\nimport { ILoginRequest, IRegistrationRequest } from '../../types/actionTypes/LoginActionTypes';\r\nimport { message } from 'antd';\r\n\r\nfunction * checkLogin (action: ILoginRequest) {\r\n  try {\r\n    const { email, password } = action.data;\r\n    const loginAPI = new LoginAPI();\r\n    const response = yield loginAPI.login(email, password);\r\n    if (response.access_token) {\r\n      window.localStorage.setItem('jwt', response.access_token);\r\n      yield put(loginCheckToken());\r\n    }\r\n    else {\r\n      yield put(loginError());\r\n    }\r\n  }\r\n  catch {\r\n    yield put(loginError());\r\n    yield message.error('ошибка авторизации');\r\n  }\r\n}\r\n\r\nfunction * checkToken () {\r\n  try {\r\n    const loginAPI = new LoginAPI();\r\n    yield loginAPI.checkToken();\r\n    yield put(loginSuccess());\r\n  }\r\n  catch {\r\n    localStorage.removeItem('jwt');\r\n    yield put(loginError());\r\n    yield message.error('ошибка авторизации');\r\n  }\r\n}\r\n\r\nfunction * registration (action: IRegistrationRequest) {\r\n  try {\r\n    const loginAPI = new LoginAPI();\r\n    yield loginAPI.createUser(action.data);\r\n    yield message.success('Регистрация прошла успешно', 2, () => window.location.href = '/login');\r\n  }\r\n  catch {\r\n    yield message.error('Регистрация отклонена');\r\n  }\r\n}\r\n\r\nfunction * loginSaga () {\r\n  yield takeEvery(LOGIN_REQUEST, checkLogin);\r\n  yield takeEvery(LOGIN_CHECK_TOKEN, checkToken);\r\n  yield takeEvery(REGISTRATION_REQUEST, registration);\r\n}\r\n\r\nexport default loginSaga;","import accountSaga from './accountSaga';\r\nimport userSaga from './userSaga';\r\nimport loginSaga from './loginSaga';\r\nimport { all } from 'redux-saga/effects';\r\n\r\nexport default function * rootSaga () {\r\n  yield all([\r\n    accountSaga(),\r\n    userSaga(),\r\n    loginSaga(),\r\n  ]);\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { rootReducer } from './redux/reducers/rootReducer';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport rootSaga from './redux/sagas/rootSaga';\r\n\r\n// declare global {\r\n//   interface Window {\r\n//     __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n//   }\r\n// }\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  compose(\r\n    applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App/>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n"],"sourceRoot":""}